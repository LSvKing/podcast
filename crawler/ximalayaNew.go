package crawler

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"github.com/ddliu/go-httpclient"
	"log"
	"net/http"
	"strconv"
)

type (
	xiMaList struct {
		Res      bool  `json:"res"`
		NextPage int   `json:"next_page"`
		SoundIds []int `json:"sound_ids"`
	}

	xiMaItem struct {
		ID       int
		PlayPath string `json:"play_path_64"`
		Duration int64  `json:"duration"`
		Title    string `json:"title"`
		NickName string `json:"nickname"`
		Intro    string `json:"intro"`
		CoverURL string `json:"cover_url"`
	}
)

type AutoGenerated struct {
	Ret  int `json:"ret"`
	Data struct {
		ID              int `json:"id"`
		AlbumDetailInfo struct {
			ID        int `json:"id"`
			AlbumInfo struct {
				ID              int    `json:"id"`
				Cover           string `json:"cover"`
				Title           string `json:"title"`
				CustomTitle     string `json:"customTitle"`
				ShortIntro      string `json:"shortIntro"`
				Price           string `json:"price"`
				DiscountedPrice string `json:"discountedPrice"`
				IsSample        bool   `json:"isSample"`
				AlbumWrap       struct {
					IsWrap bool `json:"isWrap"`
				} `json:"albumWrap"`
				Iting                     string `json:"iting"`
				PaidVoiceAlterTemplateURL string `json:"paidVoiceAlterTemplateUrl"`
				CreatedTime               int64  `json:"createdTime"`
				UpdatedTime               int64  `json:"updatedTime"`
				RecommendReason           string `json:"recommendReason"`
			} `json:"albumInfo"`
			StatCountInfo struct {
				ID         int `json:"id"`
				PlayCount  int `json:"playCount"`
				TrackCount int `json:"trackCount"`
			} `json:"statCountInfo"`
			PageURIInfo struct {
				ID           int    `json:"id"`
				CategoryID   int    `json:"categoryId"`
				CategoryName string `json:"categoryName"`
				CategoryCode string `json:"categoryCode"`
				Pinyin       string `json:"pinyin"`
				URL          string `json:"url"`
			} `json:"pageUriInfo"`
		} `json:"albumDetailInfo"`
		AlbumRichInfo struct {
			ID                  int    `json:"id"`
			RichIntro           string `json:"richIntro"`
			Achieve             string `json:"achieve"`
			BuyNotes            string `json:"buyNotes"`
			OtherTitle          string `json:"otherTitle"`
			OtherContent        string `json:"otherContent"`
			DetailCoverPath     string `json:"detailCoverPath"`
			PersonalDescription string `json:"personalDescription"`
			Outline             string `json:"outline"`
			BigshotRecommend    string `json:"bigshotRecommend"`
			ProduceTeam         string `json:"produceTeam"`
		} `json:"albumRichInfo"`
		AlbumPayTypeUserMask int  `json:"albumPayTypeUserMask"`
		AlbumPayType         int  `json:"albumPayType"`
		AlbumVipPayType      int  `json:"albumVipPayType"`
		UserPermission       bool `json:"userPermission"`
		TypeSpecData         struct {
			FreeOrSingleAlbumData struct {
				AlbumPageTrackRecords struct {
					ID               int `json:"id"`
					TotalCount       int `json:"totalCount"`
					Page             int `json:"page"`
					PageSize         int `json:"pageSize"`
					TrackDetailInfos []struct {
						ID        int `json:"id"`
						TrackType int `json:"trackType"`
						TrackInfo struct {
							ID              int    `json:"id"`
							Title           string `json:"title"`
							Intro           string `json:"intro"`
							AlbumID         int    `json:"albumId"`
							AnchorID        int    `json:"anchorId"`
							TrackType       int    `json:"trackType"`
							RelateID        int    `json:"relateId"`
							IsPaid          bool   `json:"isPaid"`
							IsFree          bool   `json:"isFree"`
							IsTrailer       int    `json:"isTrailer"`
							Cover           string `json:"cover"`
							Duration        int    `json:"duration"`
							SampleDuration  int    `json:"sampleDuration"`
							IsHoldCopyright bool   `json:"isHoldCopyright"`
							CreatedAt       string `json:"createdAt"`
							Iting           string `json:"iting"`
							PlayPath        string `json:"playPath"`
							CreatedTime     int64  `json:"createdTime"`
							UpdatedTime     int64  `json:"updatedTime"`
							IsVipFirst      bool   `json:"isVipFirst"`
							IsOffline       bool   `json:"isOffline"`
						} `json:"trackInfo"`
						PlayInfo struct {
							ID             int  `json:"id"`
							IsPaid         bool `json:"isPaid"`
							IsFree         bool `json:"isFree"`
							UserPermission bool `json:"userPermission"`
						} `json:"playInfo"`
						BaiduMusicURL string `json:"baiduMusicUrl"`
						StatCountInfo struct {
							ID int `json:"id"`
						} `json:"statCountInfo"`
						PageURIInfo struct {
							ID           int    `json:"id"`
							CategoryID   int    `json:"categoryId"`
							CategoryName string `json:"categoryName"`
							CategoryCode string `json:"categoryCode"`
							Pinyin       string `json:"pinyin"`
							URL          string `json:"url"`
						} `json:"pageUriInfo"`
					} `json:"trackDetailInfos"`
				} `json:"albumPageTrackRecords"`
				RecommendAlbums []struct {
					ID        int `json:"id"`
					AlbumInfo struct {
						ID              int    `json:"id"`
						Cover           string `json:"cover"`
						Title           string `json:"title"`
						CustomTitle     string `json:"customTitle"`
						ShortIntro      string `json:"shortIntro"`
						Price           string `json:"price"`
						DiscountedPrice string `json:"discountedPrice"`
						IsSample        bool   `json:"isSample"`
						AlbumWrap       struct {
							IsWrap bool `json:"isWrap"`
						} `json:"albumWrap"`
						Iting                     string `json:"iting"`
						PaidVoiceAlterTemplateURL string `json:"paidVoiceAlterTemplateUrl"`
						CreatedTime               int64  `json:"createdTime"`
						UpdatedTime               int64  `json:"updatedTime"`
						RecommendReason           string `json:"recommendReason"`
					} `json:"albumInfo"`
					StatCountInfo struct {
						ID         int `json:"id"`
						PlayCount  int `json:"playCount"`
						TrackCount int `json:"trackCount"`
					} `json:"statCountInfo"`
					PageURIInfo struct {
						ID           int    `json:"id"`
						CategoryID   int    `json:"categoryId"`
						CategoryName string `json:"categoryName"`
						CategoryCode string `json:"categoryCode"`
						Pinyin       string `json:"pinyin"`
						URL          string `json:"url"`
					} `json:"pageUriInfo"`
				} `json:"recommendAlbums"`
				ClassicListenAlbums []struct {
					ID        int `json:"id"`
					AlbumInfo struct {
						ID          int    `json:"id"`
						Cover       string `json:"cover"`
						Title       string `json:"title"`
						CustomTitle string `json:"customTitle"`
						ShortIntro  string `json:"shortIntro"`
						IsSample    bool   `json:"isSample"`
						AlbumWrap   struct {
							IsWrap   bool   `json:"isWrap"`
							Title    string `json:"title"`
							SubTitle string `json:"subTitle"`
						} `json:"albumWrap"`
						Iting                     string `json:"iting"`
						PaidVoiceAlterTemplateURL string `json:"paidVoiceAlterTemplateUrl"`
						CreatedTime               int64  `json:"createdTime"`
						UpdatedTime               int64  `json:"updatedTime"`
						RecommendReason           string `json:"recommendReason"`
					} `json:"albumInfo"`
					StatCountInfo struct {
						ID         int `json:"id"`
						PlayCount  int `json:"playCount"`
						TrackCount int `json:"trackCount"`
					} `json:"statCountInfo"`
					PageURIInfo struct {
						ID           int    `json:"id"`
						CategoryID   int    `json:"categoryId"`
						CategoryName string `json:"categoryName"`
						CategoryCode string `json:"categoryCode"`
						Pinyin       string `json:"pinyin"`
						URL          string `json:"url"`
					} `json:"pageUriInfo"`
				} `json:"classicListenAlbums"`
			} `json:"freeOrSingleAlbumData"`
		} `json:"typeSpecData"`
		AnchorInfo struct {
			ID       int `json:"id"`
			UserInfo struct {
				ID                  int    `json:"id"`
				Nickname            string `json:"nickname"`
				IsVip               bool   `json:"isVip"`
				Logo                string `json:"logo"`
				VerifyStatus        int    `json:"verifyStatus"`
				VerifyType          int    `json:"verifyType"`
				AnchorGrade         int    `json:"anchorGrade"`
				UserGrade           int    `json:"userGrade"`
				PersonDescribe      string `json:"personDescribe"`
				PersonalSignature   string `json:"personalSignature"`
				MobileBackgroundPic string `json:"mobileBackgroundPic"`
			} `json:"userInfo"`
			StatCountInfo struct {
				ID            int `json:"id"`
				FollowerCount int `json:"followerCount"`
			} `json:"statCountInfo"`
			URL string `json:"url"`
		} `json:"anchorInfo"`
	} `json:"data"`
	Context struct {
		CurrentUser struct {
			ID       int    `json:"id"`
			Nickname string `json:"nickname"`
			IsVip    bool   `json:"isVip"`
			Logo     string `json:"logo"`
		} `json:"currentUser"`
		BasicRequestContext struct {
			IsHybrid                    bool `json:"isHybrid"`
			IsEmbedded3RdPartner        bool `json:"isEmbedded3rdPartner"`
			IsKnowAmbassadorDistributor bool `json:"isKnowAmbassadorDistributor"`
		} `json:"basicRequestContext"`
	} `json:"context"`
}

type AudioInfo struct {
	Data struct {
		AlbumID         int  `json:"albumId"`
		HasMore         bool `json:"hasMore"`
		PageNum         int  `json:"pageNum"`
		PageSize        int  `json:"pageSize"`
		Sort            int  `json:"sort"`
		TracksAudioPlay []struct {
			AlbumID         int    `json:"albumId"`
			AlbumIsSample   bool   `json:"albumIsSample"`
			AlbumName       string `json:"albumName"`
			AlbumURL        string `json:"albumUrl"`
			AnchorID        int    `json:"anchorId"`
			CanPlay         bool   `json:"canPlay"`
			CreateTime      string `json:"createTime"`
			Duration        int    `json:"duration"`
			FirstPlayStatus bool   `json:"firstPlayStatus"`
			HasBuy          bool   `json:"hasBuy"`
			Index           int    `json:"index"`
			IsBaiduMusic    bool   `json:"isBaiduMusic"`
			IsCopyright     bool   `json:"isCopyright"`
			IsLike          bool   `json:"isLike"`
			IsPaid          bool   `json:"isPaid"`
			SampleDuration  int    `json:"sampleDuration"`
			Src             string `json:"src"`
			TrackCoverPath  string `json:"trackCoverPath"`
			TrackID         int    `json:"trackId"`
			TrackName       string `json:"trackName"`
			TrackURL        string `json:"trackUrl"`
			UpdateTime      string `json:"updateTime"`
		} `json:"tracksAudioPlay"`
		UID int `json:"uid"`
	} `json:"data"`
	Msg string `json:"msg"`
	Ret int    `json:"ret"`
}

type AlbumInfo struct {
	Ret  int    `json:"ret"`
	Msg  string `json:"msg"`
	Data struct {
		IsSelfAlbum bool `json:"isSelfAlbum"`
		CurrentUID  int  `json:"currentUid"`
		AlbumID     int  `json:"albumId"`
		MainInfo    struct {
			AlbumStatus         int    `json:"albumStatus"`
			ShowApplyFinishBtn  bool   `json:"showApplyFinishBtn"`
			ShowEditBtn         bool   `json:"showEditBtn"`
			ShowTrackManagerBtn bool   `json:"showTrackManagerBtn"`
			ShowInformBtn       bool   `json:"showInformBtn"`
			Cover               string `json:"cover"`
			AlbumTitle          string `json:"albumTitle"`
			Crumbs              struct {
				CategoryID             int    `json:"categoryId"`
				CategoryPinyin         string `json:"categoryPinyin"`
				CategoryTitle          string `json:"categoryTitle"`
				SubcategoryID          int    `json:"subcategoryId"`
				SubcategoryName        string `json:"subcategoryName"`
				SubcategoryDisplayName string `json:"subcategoryDisplayName"`
				SubcategoryCode        string `json:"subcategoryCode"`
			} `json:"crumbs"`
			UpdateDate string `json:"updateDate"`
			PlayCount  int    `json:"playCount"`
			IsPaid     bool   `json:"isPaid"`
			IsFinished int    `json:"isFinished"`
			Metas      []struct {
				MetaValueID     int    `json:"metaValueId"`
				MetaDataID      int    `json:"metaDataId"`
				CategoryID      int    `json:"categoryId"`
				IsSubCategory   bool   `json:"isSubCategory"`
				CategoryName    string `json:"categoryName"`
				CategoryPinyin  string `json:"categoryPinyin"`
				MetaValueCode   string `json:"metaValueCode"`
				MetaDisplayName string `json:"metaDisplayName"`
				Link            string `json:"link"`
			} `json:"metas"`
			IsSubscribe     bool   `json:"isSubscribe"`
			RichIntro       string `json:"richIntro"`
			DetailRichIntro string `json:"detailRichIntro"`
			IsPublic        bool   `json:"isPublic"`
			HasBuy          bool   `json:"hasBuy"`
			VipType         int    `json:"vipType"`
		} `json:"mainInfo"`
		AnchorInfo struct {
			AnchorID             int    `json:"anchorId"`
			AnchorCover          string `json:"anchorCover"`
			ShowFollowBtn        bool   `json:"showFollowBtn"`
			AnchorName           string `json:"anchorName"`
			AnchorGrade          int    `json:"anchorGrade"`
			AnchorGradeType      int    `json:"anchorGradeType"`
			AnchorAlbumsCount    int    `json:"anchorAlbumsCount"`
			AnchorTracksCount    int    `json:"anchorTracksCount"`
			AnchorFollowsCount   int    `json:"anchorFollowsCount"`
			AnchorFansCount      int    `json:"anchorFansCount"`
			PersonalIntroduction string `json:"personalIntroduction"`
			ShowAnchorAlbumModel bool   `json:"showAnchorAlbumModel"`
			AnchorAlbumList      []struct {
				AlbumID    int    `json:"albumId"`
				AlbumTitle string `json:"albumTitle"`
				Cover      string `json:"cover"`
				PlayCount  int    `json:"playCount"`
				AnchorID   int    `json:"anchorId"`
				AnchorName string `json:"anchorName"`
				URL        string `json:"url"`
			} `json:"anchorAlbumList"`
			HasMoreBtn bool `json:"hasMoreBtn"`
		} `json:"anchorInfo"`
		TracksInfo struct {
			TrackTotalCount int `json:"trackTotalCount"`
			Sort            int `json:"sort"`
			Tracks          []struct {
				Index            int    `json:"index"`
				TrackID          int    `json:"trackId"`
				IsPaid           bool   `json:"isPaid"`
				Tag              int    `json:"tag"`
				Title            string `json:"title"`
				PlayCount        int    `json:"playCount"`
				ShowLikeBtn      bool   `json:"showLikeBtn"`
				IsLike           bool   `json:"isLike"`
				ShowShareBtn     bool   `json:"showShareBtn"`
				ShowCommentBtn   bool   `json:"showCommentBtn"`
				ShowForwardBtn   bool   `json:"showForwardBtn"`
				CreateDateFormat string `json:"createDateFormat"`
				URL              string `json:"url"`
				Duration         int    `json:"duration"`
			} `json:"tracks"`
			PageNum  int `json:"pageNum"`
			PageSize int `json:"pageSize"`
		} `json:"tracksInfo"`
		SubSiteAlbumURL string `json:"subSiteAlbumUrl"`
		RecommendKw     struct {
			SourceKw      string   `json:"sourceKw"`
			RecommendText []string `json:"recommendText"`
		} `json:"recommendKw"`
		Draft interface{} `json:"draft"`
	} `json:"data"`
}

func XiMaLaYaNew(id string) []byte {

	cookies := []*http.Cookie{
		{
			Name:  "1&_token",
			Value: "82732660&F96F6A790ADC4NdV00658C2EBAD6967E63ACD97800D6127805D46E1D569708E047A1B47AD5337DD3",
		}, {
			Name:  "device_id",
			Value: "xm_1555047403033_judn2nfdv2d3d6",
		},
	}

	link := "https://www.ximalaya.com/revision/album?albumId=" + id
	//link2 := "https://www.ximalaya.com/revision/play/album?albumId=15338996&pageNum=1&sort=-1&pageSize=500"

	resp, err := httpclient.WithCookie(cookies[0], cookies[1]).Get(link)
	albumInfo := &AlbumInfo{}

	err = json.NewDecoder(resp.Body).Decode(&albumInfo)
	resp.Body.Close()

	if err != nil {
		fmt.Println(err.Error())
	}

	rss := rss{
		Title: albumInfo.Data.MainInfo.AlbumTitle,
		Author: []string{
			albumInfo.Data.AnchorInfo.AnchorName,
		},
		Summary:     albumInfo.Data.MainInfo.DetailRichIntro,
		Description: albumInfo.Data.MainInfo.DetailRichIntro,
		Subtitle:    albumInfo.Data.MainInfo.AlbumTitle,
		Version:     "2",
		Itunes:      "http://www.itunes.com/dtds/podcast-1.0.dtd",
		Link:        link,
		Language:    "zh-cn",
		Image: Image{
			Href: albumInfo.Data.MainInfo.Cover,
		},
		PubDate: albumInfo.Data.MainInfo.UpdateDate,
		Owner: Owner{
			Name:  albumInfo.Data.AnchorInfo.AnchorName,
			Email: "LSvKing@Gmail.com",
		},
	}

	pageNum := albumInfo.Data.TracksInfo.TrackTotalCount % 30
	var items []Item

	for i := 1; i <= pageNum; i++ {
		u := "https://www.ximalaya.com/revision/play/album?albumId=" + id + "&pageNum=" + strconv.Itoa(i)

		response, err := httpclient.WithCookie(cookies[0], cookies[1]).Get(u)

		//responseData,err := ioutil.ReadAll(response.Body)

		if err != nil {
			log.Fatal(err)
		}

		//fmt.Println(string(responseData))

		audioInfo := &AudioInfo{}

		err = json.NewDecoder(response.Body).Decode(&audioInfo)

		//fmt.Println(audioInfo)

		for _, v := range audioInfo.Data.TracksAudioPlay {

			items = append(items, Item{
				Title:    v.TrackName,
				Subtitle: v.AlbumName,
				Author:   albumInfo.Data.AnchorInfo.AnchorName,
				PubDate:  v.UpdateTime,
				Summary:  v.TrackName,
				Guid: Guid{
					IsPermaLink: "true",
				},
				Image: Image{
					Href: v.TrackCoverPath,
				},
				Enclosure: Enclosure{
					Url:  v.Src,
					Type: "audio/mpeg",
				},
				Duration: int64(v.Duration),
			})
		}

		response.Body.Close()

	}

	rss.Item = items

	//fmt.Println(albumInfo.Data.TracksInfo.TrackTotalCount)

	output, err := xml.MarshalIndent(rss, "  ", "    ")

	//fmt.Printf("%+v\n", rss)

	if err != nil {
		fmt.Printf("error: %v\n", err)
	}

	o := []byte("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n" + string(output))

	//fmt.Println(string(o))
	return o
}
